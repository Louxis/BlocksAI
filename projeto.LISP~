

(defun write-file (filename message)
  (with-open-file (f filename :direction :output
                     :if-exists :overwrite
                     :if-does-not-exist :create)
    (format f message)))

(defun write-test ()
(with-open-file (str "D:\3_Ano\IA\BlocksAI\help.txt"
                     :direction :output
                     :if-exists :overwrite
                     :if-does-not-exist :create)
  (format str "write anything ~%")))

(defun read-file (filename)
  (with-open-file (stream filename)
    (loop for line = (read stream nil)
          while line
          collect line)))

(defun start()
  (let ((boards (initialize)))
    (labels ((read_board () 
                        (let ((board (choose-board)))
                          (cond
                           ((or(< board 0) (> board (length boards))) (read_board))
                           (t (nth board boards))))))(read_board))))

(defun initialize ()
 (format t "~%Welcome to BlocksAI!~% Please insert the filepath you want to play with.~%")
 (read-file (read)))

(defun choose-board()
  (format t "~%Choose the board you want to test~%")
   (*(- (read) 1) 2))

(defun algorithm-number ()
  (format t "~% Please choose the algorithm you want to work with.~%1 - BFS ~%")
  (read))

(defun bfs-io-aux(board)
  (let ((bfs-solution (bfs-it (node-create (list board (list 
                                               (- 10 (block-count board 'square-1x1)) 
                                               (- 10 (block-count board 'square-2x2)) 
                                               (- 15 (block-count board 'cross)))) 
                                  nil 0 0 0 0 ) 
                     'solution-nodep 'node-expand (operators))))

     (write-file (insert-record-file) (node-print bfs-solution))
))

(defun insert-record-file ()
    (format t "Please insert the filepath where you want to save the results")
     (read) 
)

(defun choose-algorithm ()
  (let ((board (start)) (algorithm (algorithm-number)))
    (cond ((= algorithm 1) (bfs-io-aux board) (choose-algorithm)) ;;BFS
          (t nil)
          )
    ))